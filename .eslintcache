[{"/Users/aaronlichtblau/Desktop/Projects/lab-scheduler/src/index.js":"1","/Users/aaronlichtblau/Desktop/Projects/lab-scheduler/src/App.js":"2","/Users/aaronlichtblau/Desktop/Projects/lab-scheduler/src/reportWebVitals.js":"3","/Users/aaronlichtblau/Desktop/Projects/lab-scheduler/src/Form.js":"4","/Users/aaronlichtblau/Desktop/Projects/lab-scheduler/src/FileLoad.js":"5","/Users/aaronlichtblau/Desktop/Projects/lab-scheduler/src/Results.js":"6","/Users/aaronlichtblau/Desktop/Projects/lab-scheduler/src/BasicForm.js":"7","/Users/aaronlichtblau/Desktop/Projects/lab-scheduler/src/AdvancedForm.js":"8"},{"size":500,"mtime":1608751326000,"results":"9","hashOfConfig":"10"},{"size":4904,"mtime":1609545516000,"results":"11","hashOfConfig":"10"},{"size":362,"mtime":1608751326000,"results":"12","hashOfConfig":"10"},{"size":6360,"mtime":1609381784000,"results":"13","hashOfConfig":"10"},{"size":4519,"mtime":1609454647000,"results":"14","hashOfConfig":"10"},{"size":2082,"mtime":1609547164000,"results":"15","hashOfConfig":"10"},{"size":6406,"mtime":1609455708000,"results":"16","hashOfConfig":"10"},{"size":5254,"mtime":1609449299000,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"1oq7afz",{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"27","messages":"28","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"20"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"32","messages":"33","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"20"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"20"},"/Users/aaronlichtblau/Desktop/Projects/lab-scheduler/src/index.js",[],["38","39"],"/Users/aaronlichtblau/Desktop/Projects/lab-scheduler/src/App.js",[],"/Users/aaronlichtblau/Desktop/Projects/lab-scheduler/src/reportWebVitals.js",[],"/Users/aaronlichtblau/Desktop/Projects/lab-scheduler/src/Form.js",["40"],"/Users/aaronlichtblau/Desktop/Projects/lab-scheduler/src/FileLoad.js",["41","42"],"import React from 'react';\nimport axios from \"axios\";\nimport {Button, Form, Accordion, Card, Row, Col} from 'react-bootstrap';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n<script src=\"https://unpkg.com/react/umd/react.production.min.js\" crossorigin></script>\n\n\n\n\nfunction SlotNum(props) {\n  return(\n    <div class=\"col-xs-1\">\n    <Form.Row>\n      <li>\n      <Form.Label>{props.slot}</Form.Label>\n      <Form.Control\n      required\n      type=\"number\"\n      min=\"1\"\n      onChange={(e) => props.onChange(props.slot, e.target.value)}\n      defaultValue={props.value}\n      />\n      <Form.Control.Feedback type=\"invalid\">\n        Please provide a valid integer.\n      </Form.Control.Feedback>\n      </li>\n    </Form.Row>\n    </div>\n  );\n\n}\n\n\nclass FileForm extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      file: '',\n      slotdict: {\"Mo_1900\" : 0, \"Mo_2100\" : 0,\"Tu_1900\" : 0, \"Tu_2100\" : 0,\"We_1900\" : 0, \"We_2100\" : 0,\"Th_1900\" : 0, \"Th_2100\" : 0,\"Fr_1900\" : 0, \"Fr_2100\" : 0,\"Sa_1500\" : 0, \"Sa_1600\" : 0,\"Sa_1700\" : 0,\"Su_1700\" : 0,\"Su_1800\" : 0,\"Su_1900\" : 0,\"Su_2000\" : 0, \"Su_2100\" : 0},\n      hideSlots: true,\n      duration: 120,\n      validated: false,\n      hideSubmitButton: true\n  };\n    this.handleFileChange = this.handleFileChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.handleSlotChange = this.handleSlotChange.bind(this);\n    this.handleDurationChange = this.handleDurationChange.bind(this);\n  }\n\n  handleSubmit(event) {\n    var self = this;\n    const form = event.currentTarget;\n    if (form.checkValidity() === false) {\n      event.preventDefault();\n      event.stopPropagation();\n      console.log(\"invalid form\");\n      }\n\n    self.setState({\n      validated: true,\n    });\n    var data = {\n      slotdict: this.state.slotdict,\n      duration: this.state.duration\n    };\n    axios.post('/slotdict', data).then(res => { // then print response status\n            console.warn(res);\n        });\n  }\n\n  handleSlotChange(slot, value) {\n    const newSlotDict = {};\n    Object.assign(newSlotDict, this.state.slotdict);\n    newSlotDict[slot] = value;\n    this.setState({slotdict: newSlotDict});\n    // console.log(newSlotDict)\n  }\n  handleDurationChange(slot, value){\n    this.setState({duration: value})\n  }\n\n  handleFileChange(event) {\n    const target = event.target;\n    const value = target.value;\n    this.setState({\n      file: value,\n      hideSubmitButton: false,\n      hideSlots: false\n    });\n    this.fetchData();\n    // console.log(this.state.slotdict);\n    event.preventDefault();\n  }\n\n  fetchData(){\n\n    var self = this;\n    var data = {file: this.state.file};\n\n    axios.post('/file', data)\n    .then(res => { // then print response status\n        console.warn(res);\n        axios.get('/file/df').then(\n        (response) => {\n            console.log(response.data.slotdict);\n            self.setState({\n              slotdict: response.data.slotdict,\n              validated: true\n            })}\n            // console.log(response.data.slots);\n        ,\n        (error) => {\n            self.setState({error})\n          })\n    })\n\n    }\n\n\n  render() {\n    var slotList = Object.keys(this.state.slotdict).map((slot) =>\n    <li key={slot}>\n    <SlotNum\n    slot={slot}\n    onChange={this.handleSlotChange}\n    value={this.state.slotdict[slot]}\n    />\n    </li>\n  );\n\n    return (\n      <div id = \"fileForm\">\n      <Accordion defaultActiveKey=\"0\">\n      <Card>\n        <Accordion.Collapse eventKey=\"0\">\n\n          <Card.Body>\n              <Form.File\n                id=\"exampleFormControlFile1\"\n                label=\"\"\n                width =\"60\"\n                onChange={this.handleFileChange}/>\n              <Form noValidate validated={this.state.validated} onSubmit={this.handleSubmit}>\n            <SlotNum\n                slot= \"Slot Duration in Mins\"\n                onChange= {this.handleDurationChange}\n                value= {this.state.duration}/>\n              <div hidden={this.state.hideSlots}>\n                Select Number of TA's in each slot:\n                <ul> {slotList} </ul>\n              </div>\n            </Form>\n          </Card.Body>\n        </Accordion.Collapse>\n        <Card.Footer>\n          <Accordion.Toggle as={Button} type=\"submit\" onClick={this.handleSubmit} disabled={this.state.hideSubmitButton} eventKey=\"0\">\n            Submit Part 1\n          </Accordion.Toggle>\n        </Card.Footer>\n      </Card>\n      </Accordion>\n      </div>\n    );\n  }\n}\n\nexport {FileForm};\n","/Users/aaronlichtblau/Desktop/Projects/lab-scheduler/src/Results.js",["43","44","45","46"],"/Users/aaronlichtblau/Desktop/Projects/lab-scheduler/src/BasicForm.js",["47"],"import React, {useState, setState} from 'react';\nimport axios from \"axios\";\nimport {Button, Form, Row, Col, Modal} from 'react-bootstrap';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n<script src=\"https://unpkg.com/react/umd/react.production.min.js\" crossorigin></script>\n\n\nfunction Radio(props) {\n  return (\n    <>\n    <Form.Check\n    inline label={props.value}\n    type='radio' id={`inline-radio`}\n    name={props.type}\n    onClick={props.onClick}\n    defaultChecked={props.defaultValue}\n    />\n    </>\n  )\n}\n\nclass Question extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      name: props.name,\n      value: props.value,\n      defaultValue: props.defaultValue\n    };\n  }\n\n  renderRadio(i, isChecked) {\n    return(\n        <Radio\n          type = {this.props.name}\n          value= {i}\n          onClick={() => this.props.handleClick(this.props.name,i)}\n          defaultValue={isChecked}\n        />\n      );\n    }\n  render() {\n    var isChecked = Array(5).fill(false);\n    isChecked[this.state.defaultValue - 1] = true;\n    return(\n      <div>\n        {this.renderRadio('1', isChecked[0])}\n        {this.renderRadio('2', isChecked[1])}\n        {this.renderRadio('3', isChecked[2])}\n        {this.renderRadio('4', isChecked[3])}\n        {this.renderRadio('5', isChecked[4])}\n        {this.renderRadio('6', isChecked[5])}\n      </div>\n    )\n  }\n\n}\n\n\nclass BasicForm extends React.Component {\n  constructor(props){\n  super(props);\n  this.handleClick = this.handleClick.bind(this);\n  this.handleShow = this.handleShow.bind(this);\n  this.handleClose = this.handleClose.bind(this);\n  this.handleSubmit = this.handleSubmit.bind(this);\n\n  this.state = {\n    slots: props.slots,\n    avail : 4,\n    slot_type: 6,\n    no_1: 4,\n    guarantee_shift : 5,\n    shift_cap : 3,\n    equality: 2,\n    show: false\n    };\n\n\n  }\n  handleClick(name, value){\n    var self = this;\n    // console.log(this.state[name])\n    self.setState({\n      [name] : value\n    });\n    console.log(name + \" updated to \" + value);\n    // console.log(this.state[name])\n  }\n\n  handleShow(){\n    var self = this;\n    self.setState({\n      show: true\n    })\n  }\n\n  handleClose(){\n    var self = this;\n    self.setState({\n      show: false\n    })\n  }\n\n  handleSubmit(){\n    var self = this;\n    const data={\n      weightdict: {\n        avail: this.state.avail,\n        slot_type: this.state.slot_type,\n        no_1: this.state.no_1,\n        guarantee_shift : this.state.guarantee_shift,\n        shift_cap : this.state.shift_cap,\n        equality: this.state.equality,\n      }\n    }\n    axios.post('/basic',data).then(res => { // then print response status\n            console.warn(res);\n        })\n    self.setState({\n      show: false\n    })\n\n  }\n\n  renderQuestion(name, val){\n    return (\n      <Question\n      name={name}\n      value={val}\n      handleClick={this.handleClick}\n      defaultValue={this.state[name]}\n      />\n  )}\n\n  render(){\n    return(\n    <div className=\"mb-3\">\n    <Button variant=\"primary\" onClick={this.handleShow}>\n      Select Basic Settings\n    </Button>\n\n    <Modal\n      size=\"lg\"\n      show={this.state.show}\n      onHide={this.handleClose}\n      backdrop=\"static\"\n      keyboard={false}\n    >\n      <Modal.Header closeButton>\n        <Modal.Title>Basic Settings (defaults were settings used in 2019)</Modal.Title>\n      </Modal.Header>\n      <Modal.Body>\n        <Row>\n          <Col xs={12} md={8}>\n            <p>\n            It is essential that students who listed more availabilities get\n            preference over students who listed fewer availabilities.\n            </p>\n          </Col>\n          <Col xs={6} md={4}>\n            {this.renderQuestion('avail', this.state['avail'])}\n          </Col>\n        </Row>\n\n        <Row>\n          <Col xs={12} md={8}>\n            <p>\n            It is essential that students get their desired slot type (2hr vs 4hr).\n            </p>\n          </Col>\n          <Col xs={6} md={4}>\n            {this.renderQuestion('slot_type', this.state['slot_type'])}\n          </Col>\n        </Row>\n\n        <Row>\n          <Col xs={12} md={8}>\n            <p>\n            It is essential that no student gets placed in a slot that they reported as a 1\n            (can work at this time if I am absolutely needed to).\n            </p>\n          </Col>\n          <Col xs={6} md={4}>\n            {this.renderQuestion('no_1', this.state['no_1'])}\n          </Col>\n        </Row>\n\n        <Row>\n          <Col xs={12} md={8}>\n            <p>\n            It is essential that every student is guaranteed to get at least 1 shift.\n            </p>\n          </Col>\n          <Col xs={6} md={4}>\n            {this.renderQuestion('guarantee_shift', this.state['guarantee_shift'])}\n          </Col>\n        </Row>\n\n        <Row>\n          <Col xs={12} md={8}>\n            <p>\n            Students who have higher caps on the number of shifts they want to work\n            should be prioritized.\n            </p>\n          </Col>\n          <Col xs={6} md={4}>\n            {this.renderQuestion('shift_cap', this.state['shift_cap'])}\n          </Col>\n        </Row>\n\n        <Row>\n          <Col xs={12} md={8}>\n            <p>\n            The number of shifts that each students gets should be distributed as evenly\n            as possible.\n            </p>\n          </Col>\n          <Col xs={6} md={4}>\n            {this.renderQuestion('equality', this.state['equality'])}\n          </Col>\n        </Row>\n      </Modal.Body>\n      <Modal.Footer>\n        <Button\n        variant=\"primary\"\n        onClick={this.handleSubmit}\n        >Confirm</Button>\n      </Modal.Footer>\n    </Modal>\n    </div>\n  )}\n}\nfunction AdvancedForm() {\n  const [show, setShow] = useState(false);\n\n  const handleClose = () => setShow(false);\n  const handleShow = () => setShow(true);\n\n  return (\n    <>\n      <Button variant=\"primary\" onClick={handleShow}>\n        Select Advanced Settings\n      </Button>\n\n      <Modal\n        size = \"lg\"\n        show={show}\n        onHide={handleClose}\n        backdrop=\"static\"\n        keyboard={false}\n      >\n        <Modal.Header closeButton>\n          <Modal.Title>Advanced Settings</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n\n        </Modal.Body>\n        <Modal.Footer>\n          <Button variant=\"primary\">Confirm</Button>\n        </Modal.Footer>\n      </Modal>\n    </>\n  );\n}\n\n\nexport {BasicForm, AdvancedForm};\n","/Users/aaronlichtblau/Desktop/Projects/lab-scheduler/src/AdvancedForm.js",["48","49"],"import React, {useState, setState} from 'react';\nimport axios from \"axios\";\nimport {Button, Form, Row, Col, Modal, Badge} from 'react-bootstrap';\nimport DropdownMultiselect from \"react-multiselect-dropdown-bootstrap\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\n<script src=\"https://unpkg.com/react/umd/react.production.min.js\" crossorigin></script>\n\nclass AdvancedForm extends React.Component {\n  constructor(props){\n  super(props);\n  this.handleClick = this.handleClick.bind(this);\n  this.handleShow = this.handleShow.bind(this);\n  this.handleClose = this.handleClose.bind(this);\n  this.handleSubmit = this.handleSubmit.bind(this);\n  this.getSlots = this.getSlots.bind(this);\n\n  this.state = {\n    min_exp: 1,\n    min_skill : 2,\n    stress_slots: [],\n    target_delta: 1,\n    flex_shifts : 3,\n    slots: ['dummy'],\n    show: false\n    };\n  }\n  getSlots(){\n    var self = this;\n    axios.get('/slots').then(\n    (response) => {\n        console.log(response.data);\n        self.setState({\n          slots: response.data,\n          show: true\n        });\n    }\n        // console.log(response.data.slots);\n    ,\n    (error) => {\n        self.setState({error})\n      })\n  }\n\n\n  handleClick(name, value){\n    var self = this;\n    // console.log(this.state[name])\n    self.setState({\n      [name] : value\n    });\n    console.log(name + \" updated to \" + value);\n    // console.log(this.state[name])\n  }\n\n  handleShow(){\n    var self = this;\n    self.getSlots();\n  }\n\n  handleClose(){\n    var self = this;\n    self.setState({\n      show: false\n    })\n  }\n\n  handleSubmit(){\n    var self = this;\n    const data={\n      min_exp: this.state.min_exp,\n      min_skill : this.state.min_skill,\n      stress_slots: this.state.stress_slots,\n      target_delta: this.state.target_delta,\n      flex_shifts : this.state.flex_shifts,\n    }\n    axios.post('/advanced',data).then(res => { // then print response status\n            console.warn(res);\n        })\n    self.setState({\n      show: false\n    })\n\n  }\n\n  renderQuestion(name){\n    return (\n      <Form.Control\n      type=\"number\"\n      min=\"0\"\n      onChange={(e) => this.handleClick(name, e.target.value)}\n      defaultValue={this.state[name]}\n      />\n  )}\n\n  render(){\n    console.log(this.state.slots);\n    return(\n    <div className=\"mb-3\">\n    <Button variant=\"primary\" onClick={this.handleShow}>\n      Select Advanced Settings\n    </Button>\n\n    <Modal\n      size=\"lg\"\n      show={this.state.show}\n      onHide={this.handleClose}\n      backdrop=\"static\"\n      keyboard={false}\n    >\n      <Modal.Header closeButton>\n        <Modal.Title>Advanced Settings (defaults were settings used in 2019)</Modal.Title>\n      </Modal.Header>\n      <Modal.Body>\n      <h3>Adding Constraints</h3>\n      <p>If there are certain slots which require more experienced or skilled TA's,\n      select those slots in the 'stress slots' selection below. Then, select the minimum number of\n      experienced and skilled TA's that you want to be guaranteed in each of these 'stress slots'.</p>\n      <Row>\n        <Col xs={12} md={8}>\n          <p>\n          STRESS_SLOTS: slots which need especially strong TA's in them.\n          </p>\n        </Col>\n        <Col xs={6} md={4}>\n        <DropdownMultiselect\n          options={this.state.slots}\n          name=\"stress_slots\"\n        />\n        </Col>\n      </Row>\n\n      <Row>\n        <Col xs={12} md={8}>\n          <p>\n          MIN EXP: minimum number of 'experienced' TA's in each stress slot.\n          </p>\n        </Col>\n        <Col xs={6} md={4}>\n          {this.renderQuestion('min_exp')}\n        </Col>\n      </Row>\n\n      <Row>\n        <Col xs={12} md={8}>\n          <p>\n          MIN SKILL: minimum number of 'skilled' TA's in each stress slot.\n          </p>\n        </Col>\n        <Col xs={6} md={4}>\n          {this.renderQuestion('min_skill')}\n        </Col>\n      </Row>\n\n\n      <h3>Relaxing Constraints <Badge variant=\"warning\">Recommended</Badge></h3>\n      <p>If the scheduler is over constrained, it can be infeasible to create a schedule. By increasing the\n      parameters below, you relax the constraints to give the scheduler a better ability to perform optimally.</p>\n      <Row>\n        <Col xs={12} md={8}>\n          <p>\n          TARGET DELTA: this is the acceptable number of TA's above your inputted slot sizes that the scheduler can assign.\n          For example, if: FR_1900 = 5 TA's and target delta = 2, the scheduler could assign up to 7 TA's in Fr_1900.\n          </p>\n        </Col>\n        <Col xs={6} md={4}>\n          {this.renderQuestion('target_delta')}\n        </Col>\n      </Row>\n\n      <Row>\n        <Col xs={12} md={8}>\n          <p>\n          FLEX_SHIFTS: this is the number of floating shifts which the scheduler can assign in any slot.\n          For example, if: flex shifts = 3, 3 extra shifts will be assigned throughout the schedule\n          (within the target delta).\n          </p>\n        </Col>\n        <Col xs={6} md={4}>\n          {this.renderQuestion('flex_shifts')}\n        </Col>\n      </Row>\n\n\n      </Modal.Body>\n      <Modal.Footer>\n        <Button\n        variant=\"primary\"\n        onClick={this.handleSubmit}\n        >Confirm</Button>\n      </Modal.Footer>\n    </Modal>\n    </div>\n  )}\n}\n\n\nexport {AdvancedForm};\n",{"ruleId":"50","replacedBy":"51"},{"ruleId":"52","replacedBy":"53"},{"ruleId":"54","severity":1,"message":"55","line":1,"column":26,"nodeType":"56","messageId":"57","endLine":1,"endColumn":34},{"ruleId":"54","severity":1,"message":"58","line":3,"column":40,"nodeType":"56","messageId":"57","endLine":3,"endColumn":43},{"ruleId":"54","severity":1,"message":"59","line":3,"column":45,"nodeType":"56","messageId":"57","endLine":3,"endColumn":48},{"ruleId":"54","severity":1,"message":"60","line":3,"column":16,"nodeType":"56","messageId":"57","endLine":3,"endColumn":25},{"ruleId":"54","severity":1,"message":"58","line":3,"column":27,"nodeType":"56","messageId":"57","endLine":3,"endColumn":30},{"ruleId":"54","severity":1,"message":"59","line":3,"column":32,"nodeType":"56","messageId":"57","endLine":3,"endColumn":35},{"ruleId":"61","severity":1,"message":"62","line":74,"column":16,"nodeType":"63","messageId":"64","endLine":74,"endColumn":18},{"ruleId":"54","severity":1,"message":"55","line":1,"column":26,"nodeType":"56","messageId":"57","endLine":1,"endColumn":34},{"ruleId":"54","severity":1,"message":"65","line":1,"column":16,"nodeType":"56","messageId":"57","endLine":1,"endColumn":24},{"ruleId":"54","severity":1,"message":"55","line":1,"column":26,"nodeType":"56","messageId":"57","endLine":1,"endColumn":34},"no-native-reassign",["66"],"no-negated-in-lhs",["67"],"no-unused-vars","'setState' is defined but never used.","Identifier","unusedVar","'Row' is defined but never used.","'Col' is defined but never used.","'Container' is defined but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","'useState' is defined but never used.","no-global-assign","no-unsafe-negation"]